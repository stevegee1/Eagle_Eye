{
  "address": "0x3B2f81b0aB1541A860A8842b17F0389b025E909B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proposalUsed",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "proposalUse",
          "type": "address"
        }
      ],
      "name": "transferFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0046d10fd07f40eb347bd8fbd225315962e8f8f720b39d2fa15988c3df2e9576",
  "receipt": {
    "to": null,
    "from": "0x31fd2eAD08861405088A69407105bb8Ba5d554C6",
    "contractAddress": "0x3B2f81b0aB1541A860A8842b17F0389b025E909B",
    "transactionIndex": 1,
    "gasUsed": "261935",
    "logsBloom": "0x
    "blockHash": "0x1f20e7af43c6850e5492681d0043aefa33dc384b377489fbd31839aa5e9c5f6d",
    "transactionHash": "0x0046d10fd07f40eb347bd8fbd225315962e8f8f720b39d2fa15988c3df2e9576",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 37350873,
        "transactionHash": "0x0046d10fd07f40eb347bd8fbd225315962e8f8f720b39d2fa15988c3df2e9576",
        "address": "0x3B2f81b0aB1541A860A8842b17F0389b025E909B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000031fd2ead08861405088a69407105bb8ba5d554c6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1f20e7af43c6850e5492681d0043aefa33dc384b377489fbd31839aa5e9c5f6d"
      }
    ],
    "blockNumber": 37350873,
    "cumulativeGasUsed": "261935",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25e2596528b91d1e95321d5a5ae267a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalUsed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"proposalUse\",\"type\":\"address\"}],\"name\":\"transferFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"vaultContract - Eagle-Eye platform safe percentage of Reviewers' earnings is locked here, to be decided on by the EagleEye Governance forum\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Eagle_Eye_DAO/vaultContract.sol\":\"vaultContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Eagle_Eye_DAO/vaultContract.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * vaultContract - Eagle-Eye platform safe\\n * percentage of Reviewers' earnings is locked here, to be decided on by the EagleEye Governance forum\\n */\\n\\ncontract vaultContract is Ownable {\\n    event proposalUsed(address);\\n\\n    function transferFund(address payable proposalUse) public onlyOwner {\\n        (bool sent,)= proposalUse.call{value:address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Transfer failed\\\");\\n        emit proposalUsed(proposalUse);\\n    }\\n    receive() external payable{}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x4e111133ab71528146a1b0ead66cb431b0a9941fab50abf17656a8217e4313e0\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103528061007e6000396000f3fe6080604052600436106100405760003560e01c8063715018a6146100495780638da5cb5b1461005e578063cd4558fd1461008a578063f2fde38b146100aa57005b3661004757005b005b34801561005557600080fd5b506100476100ca565b34801561006a57600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b34801561009657600080fd5b506100476100a53660046102f8565b6100de565b3480156100b657600080fd5b506100476100c53660046102f8565b6101c0565b6100d2610239565b6100dc6000610293565b565b6100e6610239565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114610133576040519150601f19603f3d011682016040523d82523d6000602084013e610138565b606091505b50509050806101805760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b6040516001600160a01b03831681527f890706e0569000d017c5375527066665c826dcc475670e05cfa2fa4ce16a55009060200160405180910390a15050565b6101c8610239565b6001600160a01b03811661022d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610177565b61023681610293565b50565b6000546001600160a01b031633146100dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610177565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461023657600080fd5b60006020828403121561030a57600080fd5b8135610315816102e3565b939250505056fea2646970667358221220f52399d422686eb9a562b71b3d23d13b6483fe6725b39038b5d2aafb591346cf64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100405760003560e01c8063715018a6146100495780638da5cb5b1461005e578063cd4558fd1461008a578063f2fde38b146100aa57005b3661004757005b005b34801561005557600080fd5b506100476100ca565b34801561006a57600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b34801561009657600080fd5b506100476100a53660046102f8565b6100de565b3480156100b657600080fd5b506100476100c53660046102f8565b6101c0565b6100d2610239565b6100dc6000610293565b565b6100e6610239565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114610133576040519150601f19603f3d011682016040523d82523d6000602084013e610138565b606091505b50509050806101805760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b6040516001600160a01b03831681527f890706e0569000d017c5375527066665c826dcc475670e05cfa2fa4ce16a55009060200160405180910390a15050565b6101c8610239565b6001600160a01b03811661022d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610177565b61023681610293565b50565b6000546001600160a01b031633146100dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610177565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461023657600080fd5b60006020828403121561030a57600080fd5b8135610315816102e3565b939250505056fea2646970667358221220f52399d422686eb9a562b71b3d23d13b6483fe6725b39038b5d2aafb591346cf64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "vaultContract - Eagle-Eye platform safe percentage of Reviewers' earnings is locked here, to be decided on by the EagleEye Governance forum",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/Eagle_Eye_DAO/vaultContract.sol:vaultContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}