{
  "address": "0x9686C808A9D656185724bAEAADFB1F18404eC01F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "EAGTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "failed_to_send_ether",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getTotalNumberOfReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mappedReportToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reportID",
          "type": "uint256"
        }
      ],
      "name": "payReviewer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submitReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe094523b31aa90a2f8f88ed7ed6f05db4963f941af54bc1880f0984f2e66be9d",
  "receipt": {
    "to": null,
    "from": "0x31fd2eAD08861405088A69407105bb8Ba5d554C6",
    "contractAddress": "0x9686C808A9D656185724bAEAADFB1F18404eC01F",
    "transactionIndex": 1,
    "gasUsed": "289867",
    "logsBloom": "0x
    "blockHash": "0xe8f7d1207ec56617fcdd4f05efeda8953987d45283fb59c72b6935f7d3fd29da",
    "transactionHash": "0xe094523b31aa90a2f8f88ed7ed6f05db4963f941af54bc1880f0984f2e66be9d",
    "logs": [],
    "blockNumber": 37350859,
    "cumulativeGasUsed": "289867",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xadFB8e8E4C0B2142734263D4c7aB62DC507A29C9"
  ],
  "numDeployments": 1,
  "solcInputHash": "25e2596528b91d1e95321d5a5ae267a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EAGTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"failed_to_send_ether\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getTotalNumberOfReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mappedReportToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reportID\",\"type\":\"uint256\"}],\"name\":\"payReviewer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submitReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"ReviewerContract-  This contract keeps track of reviewers on the forum\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReviewerContract.sol\":\"ReviewerContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/ReviewerContract.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * ReviewerContract-  This contract keeps track of reviewers on the forum\\n */\\ncontract ReviewerContract {\\n    //each report is represented as a uniqueID mapped to the reviewer that submitted it\\n    mapping(uint => address) public mappedReportToAddress;\\n    uint report;\\n    error failed_to_send_ether();\\n    IERC20 EAGToken;\\n\\n    constructor(address EAGTokenAddress) {\\n        EAGToken = IERC20(EAGTokenAddress);\\n    }\\n\\n    function submitReport() public {\\n        require(msg.sender != address(0), \\\"invalid address\\\");\\n        report++;\\n        mappedReportToAddress[report] = msg.sender;\\n    }\\n\\n    function payReviewer(uint reportID) public payable {\\n        require(reportID != 0, \\\"invalid reportID\\\");\\n        require(reportID <= report, \\\"invalid reportID\\\");\\n        (bool sent, ) = payable(mappedReportToAddress[reportID]).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n        if (!sent) revert failed_to_send_ether();\\n        //transfer EAGToken from the contract balance to the reviewer as reward\\n        require(\\n            EAGToken.transfer(payable(mappedReportToAddress[reportID]), 10),\\n            \\\"Transfer of Token failed\\\"\\n        );\\n    }\\n\\n    function getTotalNumberOfReports() public view returns (uint) {\\n        return report;\\n    }\\n}\\n\",\"keccak256\":\"0x42b3122eecb28ee6f0d2ff00e1fd012117ede3d12b12b3d0cf118917c72c134b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161046a38038061046a83398101604081905261002f91610054565b600280546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6103d7806100936000396000f3fe60806040526004361061003f5760003560e01c80634ca52db614610044578063679f13bd146100675780638a44d91a1461007c578063c6ed962c14610091575b600080fd5b34801561005057600080fd5b506001546040519081526020015b60405180910390f35b61007a610075366004610338565b6100df565b005b34801561008857600080fd5b5061007a6102c1565b34801561009d57600080fd5b506100c76100ac366004610338565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161005e565b806000036101275760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a59081c995c1bdc9d125160821b60448201526064015b60405180910390fd5b60015481111561016c5760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a59081c995c1bdc9d125160821b604482015260640161011e565b6000818152602081905260408082205490516001600160a01b039091169034908381818185875af1925050503d80600081146101c4576040519150601f19603f3d011682016040523d82523d6000602084013e6101c9565b606091505b50509050806101eb576040516319fed97f60e01b815260040160405180910390fd5b6002546000838152602081905260409081902054905163a9059cbb60e01b81526001600160a01b039182166004820152600a602482015291169063a9059cbb906044016020604051808303816000875af115801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190610351565b6102bd5760405162461bcd60e51b815260206004820152601860248201527f5472616e73666572206f6620546f6b656e206661696c65640000000000000000604482015260640161011e565b5050565b336103005760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161011e565b600180549060006103108361037a565b9091555050600154600090815260208190526040902080546001600160a01b03191633179055565b60006020828403121561034a57600080fd5b5035919050565b60006020828403121561036357600080fd5b8151801515811461037357600080fd5b9392505050565b60006001820161039a57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205f2fca37756db056666c7bb83e0deadacb6674bb21e40f551470f8ede792d6ee64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80634ca52db614610044578063679f13bd146100675780638a44d91a1461007c578063c6ed962c14610091575b600080fd5b34801561005057600080fd5b506001546040519081526020015b60405180910390f35b61007a610075366004610338565b6100df565b005b34801561008857600080fd5b5061007a6102c1565b34801561009d57600080fd5b506100c76100ac366004610338565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161005e565b806000036101275760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a59081c995c1bdc9d125160821b60448201526064015b60405180910390fd5b60015481111561016c5760405162461bcd60e51b815260206004820152601060248201526f1a5b9d985b1a59081c995c1bdc9d125160821b604482015260640161011e565b6000818152602081905260408082205490516001600160a01b039091169034908381818185875af1925050503d80600081146101c4576040519150601f19603f3d011682016040523d82523d6000602084013e6101c9565b606091505b50509050806101eb576040516319fed97f60e01b815260040160405180910390fd5b6002546000838152602081905260409081902054905163a9059cbb60e01b81526001600160a01b039182166004820152600a602482015291169063a9059cbb906044016020604051808303816000875af115801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190610351565b6102bd5760405162461bcd60e51b815260206004820152601860248201527f5472616e73666572206f6620546f6b656e206661696c65640000000000000000604482015260640161011e565b5050565b336103005760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161011e565b600180549060006103108361037a565b9091555050600154600090815260208190526040902080546001600160a01b03191633179055565b60006020828403121561034a57600080fd5b5035919050565b60006020828403121561036357600080fd5b8151801515811461037357600080fd5b9392505050565b60006001820161039a57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205f2fca37756db056666c7bb83e0deadacb6674bb21e40f551470f8ede792d6ee64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "ReviewerContract-  This contract keeps track of reviewers on the forum",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13237,
        "contract": "contracts/ReviewerContract.sol:ReviewerContract",
        "label": "mappedReportToAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13239,
        "contract": "contracts/ReviewerContract.sol:ReviewerContract",
        "label": "report",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13244,
        "contract": "contracts/ReviewerContract.sol:ReviewerContract",
        "label": "EAGToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)5338"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5338": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}